package es.iesclaradelrey.dm1e2324.calderonmartinezstella.juegocartas;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Clase que representa un juego de cartas.
 * 
 * @author Stella
 */
public class Juego {

	private Baraja baraja;
	private Jugador[] jugadores;

	/**
	 * Constructor de la clase Juego.
	 * 
	 * @param baraja
	 * @param jugador.
	 */

	public Juego(Baraja baraja, Jugador[] jugador) {
		this.baraja = baraja;
		this.jugadores = jugador;
	}

	/**
	 * @return los jugadores
	 */
	public Jugador[] getJugador() {
		return jugadores;
	}

	/**
	 * Método privado para obtener el tipo de baraja
	 * 
	 * @param sc Scanner para la entrada del usuario.
	 * @return Tipo de baraja seleccionado.
	 */
	public static Baraja obtenerTipoBaraja(Scanner sc) {
		Baraja baraja = null;
		boolean correcto = false;
		do {
			System.out.print("Qué tipo de baraja quieres jugar (Española (E) / Francesa (F)): ");
			String respuestaTipoCartas = sc.next();
			if (respuestaTipoCartas.equalsIgnoreCase("E")) {
				baraja = new BarajaEspañola();
				correcto = true;
			} else if (respuestaTipoCartas.equalsIgnoreCase("F")) {
				baraja = new BarajaFrancesa();
				correcto = true;
			} else {
				System.out.println("Respuesta inválida. Por favor, introduzca E o F.");
			}
		} while (!correcto);
		return baraja;
	}

	/**
	 * Método privado para obtener la cantidad de jugadores.
	 *
	 * @param Scanner para la entrada del usuario.
	 * @return Número de jugadores.
	 */
	public static int obtenerCantidadJugadores(Scanner sc) {
		int numJugadores = 0;
		boolean correcto = false;

		do {
			try {
				System.out.print("Con cuántos jugadores quieres jugar (2-6): ");
				String respuestaCantidadJugadores = sc.next();
				numJugadores = Integer.parseInt(respuestaCantidadJugadores);

				if (numJugadores < 2 || numJugadores > 6) {
					throw new IllegalArgumentException("El número de jugadores es incorrecto.");
				}
				correcto = true;
			} catch (IllegalArgumentException e) {
				System.out.println("El número de jugadores no es válido.");
			}
		} while (!correcto);
		return numJugadores;
	}

	/**
	 * Obtiene la cantidad de cartas que se deben repartir a cada jugador.
	 *
	 * @param sc Scanner para la entrada del usuario.
	 * @return Número de cartas a repartir.
	 */
	public int obtenerCantidadCartasRepartir(Scanner sc) {
		int numCartasRepartir = 0;
		boolean correcto = false;

		do {
			try {
				System.out.print("¿Cuántas cartas se deben repartir a cada jugador en esta ronda (1-4)? ");
				String respuestaCantidadCartas = sc.next();
				numCartasRepartir = Integer.parseInt(respuestaCantidadCartas);

				if (numCartasRepartir < 1 || numCartasRepartir > 4) {
					throw new IllegalArgumentException("El número de cartas a repartir no es correcto. ");
				}
				correcto = true;
			} catch (IllegalArgumentException e) {
				System.out.println("La cantidad de cartas no es válida.");
			}
		} while (!correcto);
		return numCartasRepartir;
	}

	/**
	 * Muestra el resultado parcial de la ronda actual
	 *
	 * @param jugadores Arreglo de jugadores en la partida.
	 */
	public void mostrarResultadoParcial(Jugador[] jugadores) {
		int maxPuntuacion = Integer.MIN_VALUE;
		Jugador ganador = null;
		int i = 1;
		System.out.println("Resultados parciales:");
		for (Jugador jugador : jugadores) {
			int puntuacion = jugador.calcularPuntuacion();
			System.out.println("Jugador " + i + puntuacion + "puntos.");
			i++;

			if (puntuacion > maxPuntuacion) {
				maxPuntuacion = puntuacion;
				ganador = jugador;
			}
		}

		System.out.println("El jugador " + ganador.getNumJugador() + " va ganando con " + maxPuntuacion + " puntos.");
		System.out.println("-".repeat(100));
	}

	/**
	 * Muestra el resultado final de la partida
	 *
	 * @param jugadores Jugadores de la partida.
	 */

	private void mostrarResultadoFinal(Jugador[] jugadores) {
		Arrays.sort(jugadores, Comparator.comparingInt(Jugador::calcularPuntuacion).reversed());

		System.out.println("Resultados finales:");

		for (int i = 0; i < jugadores.length; i++) {
			Jugador jugador = jugadores[i];
			System.out.println("Posición " + (i + 1) + ": " + jugador.toString() + " - Puntuación: "
					+ jugador.calcularPuntuacion());
		}

		System.out.println("El ganador es el jugador " + jugadores[0].getNumJugador() + " con "
				+ jugadores[0].calcularPuntuacion() + " puntos.");
	}

	/**
	 * Reparte un número específico de cartas a cada jugador en la ronda actual.
	 *
	 * @param jugadores Arreglo de jugadores a los que se les repartirán las cartas.
	 * @param baraja    Baraja utilizada para el reparto.
	 * @param numCartas Número de cartas a repartir.
	 */
	public void repartirCartas(Jugador[] jugadores, Baraja baraja, int numCartas) {
		for (Jugador jugador : jugadores) {
			for (int i = 0; i < numCartas; i++) {
				if (!baraja.getBaraja().isEmpty()) {
					Carta carta = baraja.getBaraja().remove(0);
					jugador.recibirCarta(carta);
				}
			}
		}
	}

	/**
	 * Reparte un número de cartas a cada jugador
	 *
	 * @param numeroCartas Número de cartas a repartir a cada jugador
	 */
	public void repartir(int numeroCartas) {
		int numJugadores = jugadores.length;
		int cartasRepartidas = 0;

		while (cartasRepartidas < numeroCartas) {
			for (int i = 0; i < numJugadores; i++) {
				if (cartasRepartidas < numeroCartas) {
					jugadores[i].recibirCarta(baraja.getBaraja().remove(0));
					cartasRepartidas++;
				}
			}
		}
	}

	/**
	 * Inicia el juego gestionando las rondas, el barajado y el reparto de cartas
	 * hasta que la baraja se agote.
	 *
	 * @param Scanner      para la entrada del usuario.
	 * @param numJugadores Número de jugadores en la partida.
	 */
	public void iniciarJuego(Scanner sc, int numJugadores) {

		Jugador[] jugadores = new Jugador[numJugadores];
		for (int i = 0; i < numJugadores; i++) {
			jugadores[i] = new Jugador(i + 1);
		}
		int ronda = 1;
		while (baraja.getBaraja().size() > 0) {
			System.out.println("Ronda " + ronda);

			int numCartasRepartir = obtenerCantidadCartasRepartir(sc);

			baraja.barajar();
			repartirCartas(jugadores, baraja, numCartasRepartir);
			mostrarResultadoParcial(jugadores);

			ronda++;
		}

		mostrarResultadoFinal(jugadores);

	}

}
